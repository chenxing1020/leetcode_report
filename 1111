class Solution {
    public static String decodeString(String s) {
        if (s.equals("")) return "";
        char[] c = s.toCharArray();
        int k = 0, len = c.length;
        Stack<String> strStack = new Stack<>();
        Stack<Integer> intStack = new Stack<>();
        while (k < len) {
            //get number
            if (c[k] > 47 && c[k] < 58) {
                int num = 0;
                while (k < len && c[k] > 47 && c[k] < 58) {
                    num = num * 10 + c[k++] - 48;
                }
                intStack.push(num);
            } else {
                //multiply String
                if (c[k] == ']') {
                    String tmpS = "", catStr = "";
                    //get concat String
                    while (!strStack.peek().equals("[")) {
                        catStr = strStack.pop().concat(catStr);
                    }
                    //pop "["
                    strStack.pop();
                    int n = intStack.pop();
                    for (int i = 0; i < n; i++) {
                        tmpS = tmpS.concat(catStr);
                    }
                    strStack.push(tmpS);
                } else {
                    strStack.push(String.valueOf(c[k]));
                }
                k++;
            }
        }

        //concat every element in stack
        String result = strStack.pop();
        while (strStack.size() > 0) {
            result = strStack.pop().concat(result);
        }
        return result;
    }
}
